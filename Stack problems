// stack implementation:


import java.util.*;
class StackArray
{
    int []arr;
    int top=-1;
    int size;
    
    StackArray(int size)
    {
        this.size=size;
        arr=new int[size];
    }
    
    public void push(int val)
    {
        if(top+1<size)
        {
            top++;
            arr[top]=val;
        }
        else{
        System.out.println("stack overflow");
        }
    }
    
    public void pop()
    {
        if(top==-1)
        {
            System.out.println("Stack underflow");
        }
        else{
        System.out.println("delete:"+arr[top]);
        top--;
        }
    }
    public void peek()
    {
        if(top==-1)
        {
            System.out.println("stack is empty");
        }
        else{
        System.out.println(arr[top]);
        }
    }
}
public class Main
{
	public static void main(String[] args) {
	   StackArray s=new StackArray(5);
	   s.peek();
	   s.push(67);
	   s.peek();
	   s.push(78);
	   s.peek();
	   s.pop();
	   s.peek();
	}
}


// valid parenthesis
 java.util.*;
public class Main
{
    public static boolean isValid(String s)
    {
     Stack <Character> st = new Stack <Character>();
       for(int i=0;i<s.length();i++)
       {
         char ch=s.charAt(i);
       if(ch=='(') st.push(')');
       else if(st.isEmpty()==false) st.pop();
       else return false;
       }
       return st.isEmpty();
    }
	public static void main(String[] args) {
		String s="(()";
       System.out.println(isValid(s));
	}
}

// remove adjacent dublicate in String:
import java.util.*;
class HelloWorld {
    public static String removeAdjacentDub(String s)
    {
        Stack<Character> st=new Stack<Character>();
        StringBuilder sb=new StringBuilder();
        for(int i=0;i<s.length();i++)
        {
            char ch=s.charAt(i);
            if(st.isEmpty() || st.peek()!=ch) st.push(ch);
            else
            st.pop();
        }
        for(char c:st)
        {
          sb.append(c);  
          //System.out.println(c);
        }
        return sb.toString();
    }
    public static void main(String[] args) {
        String str="abbaca";
       String res= removeAdjacentDub(str);
       System.out.println(res);
    }
}


class LinkList{
    Node head;
    class Node
    {
        int data;
        Node next;
        Node(int data)
        {
            this.data=data;
        }
    }
        public void push(int data)
        {
            Node newNode=new Node(data);
            newNode.next=head;
            head=newNode;
        }
    
        public void print()
        {
            Node temp=head;
            while(temp!=null)
            {
                System.out.print(temp.data +"=>");
                temp=temp.next;
            }
            System.out.println("Null");
        }
    
       public void middleNode()
       {
           Node slow=head;
           Node fast=head;
           while(fast!=null && fast.next!=null)
           {
               fast=fast.next.next;
               slow=slow.next;
           }
           System.out.print(slow.data);
       }
       
       public boolean containsloop()
       {
           Node slow=head;
           Node fast=head;
           while(fast!=null && fast.next!=null)
           {
               slow=slow.next;
               fast=fast.next.next;
               if(slow==fast)
              {
                return true;
              }
           }
           return false;
       }
       public void createLoopInLinkList()
       {
           Node first=new Node(1);
           Node second=new Node(2);
           Node third=new Node(3);
           Node fourth=new Node(4);
           Node fifth=new Node(6);
           Node sixth=new Node(7);
           
           head=first;
           first.next=second;
           second.next=third;
           third.next=fourth;
           fourth.next=fifth;
           fifth.next=sixth;
           sixth.next=third;
       }
       
       
    public static void main(String[] args) {
        LinkList l=new LinkList();
        // l.push(34);
        // l.push(33);
        // l.push(37);
        // l.push(32);
        // l.push(31);
        // l.print();
        // l.middleNode();
        l.createLoopInLinkList();
        System.out.println(l.containsloop());
    }
}
