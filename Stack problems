// stack implementation:


import java.util.*;
class StackArray
{
    int []arr;
    int top=-1;
    int size;
    
    StackArray(int size)
    {
        this.size=size;
        arr=new int[size];
    }
    
    public void push(int val)
    {
        if(top+1<size)
        {
            top++;
            arr[top]=val;
        }
        else{
        System.out.println("stack overflow");
        }
    }
    
    public void pop()
    {
        if(top==-1)
        {
            System.out.println("Stack underflow");
        }
        else{
        System.out.println("delete:"+arr[top]);
        top--;
        }
    }
    public void peek()
    {
        if(top==-1)
        {
            System.out.println("stack is empty");
        }
        else{
        System.out.println(arr[top]);
        }
    }
}
public class Main
{
	public static void main(String[] args) {
	   StackArray s=new StackArray(5);
	   s.peek();
	   s.push(67);
	   s.peek();
	   s.push(78);
	   s.peek();
	   s.pop();
	   s.peek();
	}
}


// valid parenthesis
 java.util.*;
public class Main
{
    public static boolean isValid(String s)
    {
     Stack <Character> st = new Stack <Character>();
       for(int i=0;i<s.length();i++)
       {
         char ch=s.charAt(i);
       if(ch=='(') st.push(')');
       else if(st.isEmpty()==false) st.pop();
       else return false;
       }
       return st.isEmpty();
    }
	public static void main(String[] args) {
		String s="(()";
       System.out.println(isValid(s));
	}
}
